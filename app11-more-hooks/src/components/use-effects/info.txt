Effects run whenever synchronization is needed 

To write an Effect, follow these three steps:
    1. Declare an Effect. By default, your Effect will run after every render.
    2. Specify the Effect dependencies. Most Effects should only re-run when needed rather than after every render. For example, a fade-in animation should only trigger when a component appears. Connecting and disconnecting to a chat room should only happen when the component appears and disappears, or when the chat room changes. You will learn how to control this by specifying dependencies.
    3. Add cleanup if needed. Some Effects need to specify how to stop, undo, or clean up whatever they were doing. For example, “connect” needs “disconnect”, “subscribe” needs “unsubscribe”, and “fetch” needs either “cancel” or “ignore”. You will learn how to do this by returning a cleanup function.
    Let’s look at each of these steps in detail.

You can tell React to skip unnecessarily re-running the Effect by specifying an array of dependencies as the second argument to the useEffect call. Start by adding an empty [] array

useEffect(()=>{...},[]); use blank array as 2nd argument for skip unnecessarily re-running the Effect


    useEffect(() => {
        This runs after every render
      });
      
      useEffect(() => {
        This runs only on mount (when the component appears)
      }, []);
      
      useEffect(() => {
        This runs on mount *and also* if either a or b have changed since the last render
      }, [a, b]);

    The code inside the Effect does not use any props or state, so your dependency array is [] (empty). 
    This tells React to only run this code when the component “mounts”, i.e. appears on the screen for the first time.

    Mounting and unmounting are two important concepts in React. Mounting refers to the process of adding a
     component to the DOM, while unmounting refers to the process of removing a component from the DOM.